package day2;

/*
 * String - non primitive data type
 *  represents sequence characters
 *  pkg - java.lang.String
 *  immutable
 *  
 *  Ways to define String
 *    1. String literal value
 *    2. using new keyword
 *    
 *  String storage location
 *    Heap - new keyword
 *    String Constant pool - string literal value
 *    
 *  v1.6 - SCP is outside of heap area
 *  v1.7 - SCP is part of heap area
 *  
 *  Methods to access/manipulate string
 *  
 *  
 */

public class StringDemo {
	static String str6;
	public static void main(String[] args) {
		
		// String literals
		String str1 = "Hello";
		String str2 = "Hello";
		String str13 = str1;
		
		
		
		System.out.println(str1==str2);//true
		System.out.println(str1==str13);//true
		
		System.out.println(str1+" "+str2);
		
		str1.concat(" World!");
		
		System.out.println(str1.hashCode());
		System.out.println(str2.hashCode());
		
		System.out.println(str1);// Hello 
		System.out.println(str2);// Hello
		
		str1 = str1.concat(" World!");
		System.out.println(str1);// Hello World!
		System.out.println(str2);// Hello
		
		// hashcode
		System.out.println(str1.hashCode());
		System.out.println(str2.hashCode());
		
		// create string obj using new keyword
		String str3 = new String(); 
		String str4 = new String("Hello World!");
		String str5 = new String(new char[] {'h', 'i'});
		String str7 = new String("Hello World!");
		String str8 = str4;
		
	
		System.out.println(str3);
		System.out.println(str4);
		System.out.println(str5);
		System.out.println(str6);// null
		
		str5 =null;
		System.out.println("$$$$$"+str5);
		
		// equals - content comparison& '==' reference comparison
		
		System.out.println(str4==str8); // true
		System.out.println(str4==str7); // false
		
		System.out.println(str4.equals(str7)); // true
		
		System.out.println(str1.charAt(0));//H
		System.out.println("Hello".compareTo("Hello")); //0
		System.out.println("hello".compareTo("Hello"));//1
		System.out.println("Hello".compareTo("hello"));//-1
		System.out.println("Hello".compareToIgnoreCase("hello")); //0
		System.out.println("Hello".contains("ell"));// true
		System.out.println("Hello".endsWith("o"));//true
		System.out.println("HELLO".toLowerCase());//hello
		System.out.println("Hello".indexOf('l')); //2
		String[] strArr= "Hello World".split(" ");
		System.out.println(strArr[0]+" "+strArr[1]);
		System.out.println(String.join("-", "Hello", "World!"));
		
	}
	
	//String Buffer Demo
	
	/*
 * StringBuffer
 *   - mutable
 *   - introduced in Java 1.0v
 *   - methods are synchronized - thread safe
 *   - default capacity - 16
 *   - new capacity - (oldcapacity*2)+2.
 *   - equals method is not overriden in string buffer  
 *   
 *   - StringBuilder introduced in java1.5v
 *     - methods are not synchronized 
 *     - No thread safety
 *     - faster compare to StringBuffer	  
 */   

public class StringBufferDemo {

	public static void main(String[] args) {
		
		StringBuffer sb1 = new StringBuffer();
		System.out.println(sb1.capacity()); // 16
		
		StringBuffer sb2 = new StringBuffer("Hello");
		System.out.println(sb2.capacity()); //21
		
		sb2.append("asdfg ggqwe qrttt ttt");
		System.out.println(sb2.capacity()); // 44
		
		StringBuffer sb3 = new StringBuffer("Hello");
		
		System.out.println(sb2==sb3);// reference comparison-false
		System.out.println(sb2.equals(sb3));// reference comparison - false
		
		StringBuilder sbd1 = new StringBuilder();
		System.out.println(sbd1.capacity()); // 16
		
		StringBuilder sbd2 = new StringBuilder("Hello");
		System.out.println(sbd2.capacity()); //21
		
		StringBuilder sbd3 = new StringBuilder("Hello");
		
		System.out.println(sbd2==sbd3);// reference comparison-false
		System.out.println(sbd2.equals(sbd3));// reference comparison - false
		
		
		// Converting StringBuilder to String
		System.out.println(sbd2.getClass().getName());// StringBuilder
		 
		String str2 = new String(sbd2);
		String str3 = new String(sbd3);
		
		System.out.println(str2.getClass().getName());// String
		
		System.out.println(str2.equals(str3)); // content comparison - true
		
		System.out.println(str2);//"Hello"
		// converting String to StringBuffer
		StringBuffer sb4 = new StringBuffer(str2);
		sb4.reverse();
		System.out.println(sb4);
	}

}

}



//Array class notes


/*
 * Store more than one element 
 * Arrays support homogeneous elements
 * size of the array fixed 
 * better performance
 * using index value you can fetch elements from array
 * types of arrays
 *   single dimensional
 *   multi dimensional
 *   
 * declare single dimensional array
 *  int[] x; // null
 *  String[] strArr;  // null
 *  double[] arr; //null
 * 
 *  int x; // 0
 *  
 *  int[] x; // commonly used syntax 
 *  int []x;
 *  int x[];
 *  
 *  
 *  
 *  instantiation:
 *  int[] x = new int[5];
 *  
 *  int
 *  initialization:
 *  x[0] = 10;
 *  x[1] = 20;
 *  x[2] = 30;
 *  x[3] = 40;
 *  x[4] = 50;
 *  x[5] = 60; // IndexOutOfBoundException
 *  
 *  
 *  int[] x = {10, 20, 30};
 *  int[] x = new int[]{10, 20, 30};
 *  
 *  // Read an array
 *  System.out.println(x[2]);
 *  System.out.println(x[4]);
 *  
 *  for(int indx=0; indx<5; indx++) { // 1, 3, 5
 *      //System.out.println(indx); //0,1, 2, 3, 4
 *      System.out.println(x[indx]); // 10, 20, 30, 40, 50
 *  }
 *  
 *  for( int num : x) {
 *  	System.out.println(num); 
 *  }
 *  
  *
 *
 * MultiDimentional array:
 * 
 *  - 2D Array
 *  
 *  0 0 
 *  0 0 
 *  0 0 
 *  
 *  
 *  int[][] x = new int[2][2];
 *  x[0][0] = 10;
 *  x[0][1] = 20;
 *  x[1][0] = 30;
 *  x[1][1] = 40;
 *  
 *  Other Option to initialize 2D array
 *  int[][] x = new int[][]{{10, 20}, {30, 40}};
 *  int[][] x = {{10, 20, 30}, {40, 50, 60}, {70, 80, 90}};
 *  
 *  
 *  for(int i=0; i<row.length; i++) {
 *    for(int j=0; j<col.length; j++) {
 *    	 System.out.println(x[i][j]);
 *    }
 *  }
 *  
 *  
 *  
 *  
 */

public class ArrayDemo {

	public static void main(String[] args) {
		// instantiation
		// Option 1
		int[] intArr = new int[5];

		intArr[0] = 10;
		intArr[1] = 20;
		intArr[2] = 30;

		// read
		for (int i = 0; i < intArr.length; i++) {
			System.out.println(intArr[i]);
		}

		String[] strArr = new String[5];
		strArr[0] = "aa";
		strArr[4] = "bb";

		for (String str : strArr) {
			System.out.println(str);
		}

		// Option 2
		int[] intArr2 = { 5, 10, 15 };

		int indx = 0;
		while (indx < intArr2.length) {
			// logic
			System.out.print(intArr2[indx] + " ");
			indx++;
		}
		System.out.println();
		System.out.println(intArr2[2]); // 15
		intArr2[1] = 100;
		System.out.println(intArr2[1]);// 100

		// Option 3
		char[] charArr = new char[] { 'h', 'e', 'l', 'l', 'o' };
		for (char ch : charArr) {
			System.out.print(ch + " ");
		}
		System.out.println();
		for (int i = 1; i < 4; i++) {
			System.out.println(charArr[i]);// e, l, l
		}

		// Multi dimensional array
		int[][] x = new int[2][2];
		x[0][0] = 10;
		x[0][1] = 20;
		x[1][0] = 30;
		x[1][1] = 40;

		// Other Option to initialize 2D array
		int[][] y = new int[][] { { 10, 20 }, { 30, 40 } };
		int[][] z = { { 10, 20, 30, 40 }, { 40, 50, 60, 70 }, { 70, 80, 90, 40 } };

		System.out.println(y[0][1]);// 20
		System.out.println(z[1][2]);// 60

		for (int i = 0; i < z.length; i++) { // rows=3
			for (int j = 0; j < z[i].length; j++) {// cols=4
				System.out.print(z[i][j] + " ");
			}
			System.out.println();
		}

		// Jagged Array - number of columns won't be same

		int[][] jaggedArr = new int[4][];
		jaggedArr[0] = new int[1];
		jaggedArr[1] = new int[2];
		jaggedArr[2] = new int[3];
		jaggedArr[3] = new int[4];
		
		System.out.println(jaggedArr.length); //3
		// initialize jagged array
		for(int i=0;i<jaggedArr.length; i++) {
			for(int j=0; j<jaggedArr[i].length; j++) {
				jaggedArr[i][j]=1;
			}
		}
		System.out.println();
		// read
		for(int i=0;i<jaggedArr.length; i++) {
			for(int j=0; j<jaggedArr[i].length; j++) {
				System.out.print(jaggedArr[i][j]+" ");
			}
			System.out.println();
		}
		

	}

}